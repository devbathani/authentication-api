const axios = require('axios');
const jwt = require('jsonwebtoken');
const getPem = require('rsa-pem-from-mod-exp');
const { OTPLESS_KEY_API, OTPLESS_USER_INFO_API, OTPLESS_MAGIC_LINK_API } = require('./constants');

class UserDetail {
  static async decodeIdToken(idToken, clientId, clientSecret) {
    try {
      const oidcConfig = await getConfig();
      const publicKey = await getPublicKey(oidcConfig.jwks_uri);
      const decoded = await decodeJWT(idToken, publicKey.n, publicKey.e, oidcConfig.issuer);

      const userDetail = {
        success: true,
        authTime: Number(decoded.auth_time),
        phoneNumber: decoded.phone_number,
        email: decoded.email,
        name: decoded.name,
        setCountryCode: decoded.country_code,
        setNationalPhoneNumber: decoded.national_phone_number
      };

      return userDetail;
    } catch (error) {
      throw new Error(error.message);
    }
  }

  static async verifyToken(token, clientId, clientSecret) {
    try {
      const form = new URLSearchParams();
      form.append('token', token);
      form.append('client_id', clientId);
      form.append('client_secret', clientSecret);

      const headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
      };

      const response = await axios.post(OTPLESS_USER_INFO_API, form, {
        headers,
      });

      if (response.status === 200) {
        const userDetail = response.data;
        if (!userDetail) {
          throw new Error('Something went wrong');
        } else {
          userDetail.success = true;
          return userDetail;
        }
      } else {
        const { message } = response.data;
        throw new Error(message);
      }
    } catch (error) {
      if (error.response) {
        const { message } = error.response.data;
        throw new Error(message);
      } else {
        throw new Error('Something went wrong please try again');
      }
    }
  }

  static async verifyCode(code, clientId, clientSecret) {
    try {
      const oidcConfig = await getConfig();
      const formData = {
        code: code,
        client_id: clientId,
        client_secret: clientSecret,
      };
      const formBody = new URLSearchParams(formData).toString();
      const config = {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      };

      const response = await axios.post(oidcConfig.token_endpoint, formBody, config);

      if (response.status === 200) {
        return this.decodeIdToken(response.data.id_token, clientId, clientSecret);
      } else {
        throw new Error(response.data.message);
      }
    } catch (error) {
      throw new Error(error.message);
    }
  }

  static async magicLink(mobile, email, redirectURI, channel, clientId, clientSecret) {
    const baseUrl = OTPLESS_MAGIC_LINK_API;
    const params = {
      client_id: clientId,
      client_secret: clientSecret,
    };
  
    if (email) {
      params.email = email;
    }

    if (channel) {
      params.channel = channel;
    }
  
    if (mobile) {
      params.mobile_number = mobile;
    }
  
    if (redirectURI) {
      params.redirect_uri = redirectURI;
    }

    try {
      const response = await axios.get(baseUrl, { params });
  
      const magicLinkTokens = response.data;
  
      if (response.status >= 200 && response.status < 300) {
        magicLinkTokens.success = true;
        return magicLinkTokens;
      } else {
        return handleErrorResponse(`Unexpected status code: ${response.status}`);
      }
    } catch (error) {
      if (error.response) {
        return handleErrorResponse(error.response.data);
      } else {
        return failedMagicLinkRes(`An unexpected error occurred: ${error.message}`);
      }
    }
  }
}

async function handleErrorResponse(errorResponse) {
  return { success: false, error: errorResponse };
}

async function failedMagicLinkRes(errorMessage) {
  return { success: false, error: errorMessage };
}

async function decodeJWT(jwtToken, modulus, exponent, issuer) {
  const publicKey = await createRSAPublicKey(modulus, exponent);
  const verifyOptions = {
    algorithms: ['RS256'],
    issuer: issuer,
  };

  try {
    const decoded = jwt.verify(jwtToken, publicKey, verifyOptions);
    return decoded;
  } catch (error) {
    throw new Error('JWT verification failed: ' + error.message);
  }
}

async function createRSAPublicKey(modulus, exponent) {
  const pem = getPem(modulus, exponent);
  return pem;
}

async function getConfig() {
  const response = await axios({
    method: 'get',
    url: OTPLESS_KEY_API,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
  });

  if (response.data) {
    return response.data;
  }
  throw new Error('Unable to fetch OIDC config');
}

async function getPublicKey(url) {
  const response = await axios({
    method: 'get',
    url: url,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
  });

  if (response.data && response.data.keys && response.data.keys[0]) {
    return response.data.keys[0];
  }
  throw new Error('Unable to fetch public key');
}

module.exports = {
  UserDetail,
  verifyCode: UserDetail.verifyCode,
  decodeIdToken: UserDetail.decodeIdToken,
  verifyToken: UserDetail.verifyToken,
  magicLink: UserDetail.magicLink
};
